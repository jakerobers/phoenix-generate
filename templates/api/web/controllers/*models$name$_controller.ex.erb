defmodule <%= module_name %>.<%= model.module %>Controller do
  use <%= module_name %>.Web, :controller

  alias <%= module_name %>

<% if model.name == "user" -%>
  plug Authenticate when action in [:update, :show, :delete]
<% else -%>
  plug Authenticate
<% end -%>

  plug ValidateFilters, [[], []] when action in [:index]
  plug :scrub_params, "data" when action in [:create, :update]
  plug :action

  # GET /<%= model.plural %>
  def index(conn, params) do
    params = clean_params(params)
    current_user = conn.assigns[:current_user]

    query = from(p in <%= model.module %>)
    |> JSONAPI.Query.add_query_paging(params)

    <%= model.plural %> = Repo.all(query)
    render conn, "index.json", %{data: <%= model.plural %>, params: params}
  end

  # GET /<%= model.plural %>/:id
  def show(conn, %{"id" => id}) do
    <%= model.name %> = Repo.get!(<%= model.module %>, id)
    |> <%= model.module %>.preload!()

    render conn, "show.json", data: <%= model.name %>
  end

  # POST /<%= model.plural %>
  def create(conn, json=%{"format" => "json"}) do
    current_user = conn.assigns[:current_user]
    <%= model.name %>_json = Dict.get(json, "data", %{})

    case <%= model.module %>.create(<%= model.name %>_json) do
      {:ok, <%= model.name %>} ->
      conn
      |> put_resp_header("Location", <%= model.name %>_path(conn, :show, <%= model.name %>.id))
      |> put_status(201)
      |> render "show.json", data: <%= model.name %>
      {:error, errors} ->
      put_status(conn, 400) |> render ErrorView, "errors.json", errors: errors
    end
  end

  # PUT /<%= model.plural %>/:id
  def update(conn, json=%{"format" => "json", "id" => id}) do
    <%= model.name %> = Repo.get!(<%= model.module %>, id)
    |> <%= model.module %>.preload!()

    <%= model.name %>_json = Dict.get(json, "data", %{})
    current_user = conn.assigns[:current_user]

    case <%= model.module %>.update(<%= model.name %>, <%= model.name %>_json) do
    {:ok, <%= model.name %>} ->
      conn
      |> put_status(200)
      |> render "show.json", data: <%= model.name %>
    {:error, errors} ->
      put_status(conn, 400) |> render ErrorView, "errors.json", errors: errors
    end
  end

  # DELETE /<%= model.plural %>/:id
  def delete(conn, %{"format" => "json", "id" => id}) do
    <%= model.name %> = Repo.get!(<%= model.module %>, id)
    |> <%= model.module %>.preload!()

    current_user = conn.assigns[:current_user]

    <%= model.module %>.delete!(<%= model.name %>)

    send_resp(conn, 204, "") |> halt
  end
end
